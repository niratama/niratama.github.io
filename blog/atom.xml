<?xml version="1.0" encoding="UTF-8" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title>食用ではありません</title>
<link rel="alternate" href="http://nira.poi.jp/blog/" />
<author>こばやし &apos;にらたま&apos; けんいち</author>
<generator uri="https://github.com/Songmu/p5-Riji" version="0.1.3">Perl Riji</generator>
<id>tag:nira.poi.jp,2013-09-22:blog:</id>
<updated>2014-08-29T00:42:21+09:00</updated>
<entry>
<title type="text">YAPC::Asia Tokyo 2014 0日目メモ</title>
<link href="http://nira.poi.jp/blog/entry/2014-08-28-02.html" />
<author>
<name>Kenichi Kobayashi</name>
</author>
<content><![CDATA[<h1>YAPC::Asia Tokyo 2014 0日目メモ</h1>

<p>というわけで前夜祭から参加してきました。</p>

<p><a href="http://twilog.org/Niratama/hashtags-yapcasia">Twilog</a>も参照のこと。</p>

<h2>受付</h2>

<p>17:30から受付という事だったので時間合わせて行ったらまだ準備中でした。</p>

<p>結局だいたい17:45くらいに受付開始。
この時間から来てる人は訓練された個人スポンサーが多かったようで、一般列がらがらなのに個人スポンサー列が行列という不思議な状態に。</p>

<h2>開場</h2>

<p>ビールやソフトドリンクの他に、今回は<a href="http://labo.dmm.com/information/2014/0729/">DMMかき氷</a>が配られてました。
数日前までならちょうどよかったのかもしれないけど、残念ながら今日はだいぶ涼しかったせいで微妙な感じに。
でも、なかなか美味しかったので、いい時期に売ってたら普通に買うレベルじゃないかと。</p>

<h2>欲しいものは作ればいい! 〜Webアプリ10連発〜</h2>

<p>まず @yusukebe さんから。ライブラリや環境が揃ってきた今だから、ということでこの企画だそうで。</p>

<h3>GeekDojo / @__papix__ さん</h3>

<ul>
<li>短期間でのリリースにはやっぱりテストと属人性の排除が重要</li>
<li>Botやツールを組み合わせて通知や自動化ってのもよさそう</li>
</ul>


<h3>hrhm.info / @hondallica さん</h3>

<ul>
<li>ネットにあるデータを複数収集して組み合わせることで自サービス向けのデータを作っている</li>
<li>収集には専用にPCを用意していて、最初はとにかく集めるのが重要</li>
</ul>


<h3>pplog / @ppworks さん</h3>

<ul>
<li>herokuですぐリリースできるベースアプリを作ってテンプレートのかわりに使っている

<ul>
<li>飽きる前に・小さく・最初は挑戦しない・小さく挑戦する、を実現するのに良さそう</li>
</ul>
</li>
<li>開発者が中の人ぶらない、ってのは情報集約の点でも大事なのかもしれない</li>
</ul>


<h3>ゴミ収集カレンダー / @syachi さん</h3>

<ul>
<li>音声読上げ用のHTMLから正規表現でデータをスクレイピングしているとの事。パターンが多くて大変そう</li>
<li>Google CalendarからアクセスするiCalは<code>text/calendar; charset=utf-8</code>でないと文字化けを起こすそうだ</li>
</ul>


<h3>wri.pe / @masuidrive さん</h3>

<ul>
<li>自分の欲しいものを自分で作った結果としてのサービス</li>
<li>データを別サービスにバックアップできるようにするというのはサービス継続の話だけじゃなくて、ユーザー自身乗り換えのときとか、トラブルのときにも有効な気がする</li>
<li>ちなみに今回の記事の元になったメモも、この発表聞いてるとき以後はwri.peを使って書いてます</li>
</ul>


<h3>プライベートで3年間チーム開発した話 / @hika69 さん</h3>

<ul>
<li>単一のサービスじゃなくてチーム開発でいくつかサービスを立ちあげた話</li>
<li>とにかくサービスを完成させるのが大事</li>
</ul>


<h3>ttyrecからGIFアニメを作る話 / @sugyan さん</h3>

<ul>
<li>ttyrecの出力ファイルをGIFアニメ化するツールを作ってWebサービス化した話</li>
</ul>


<h3>GIFMAGAZINEの話 / @razokulover さん</h3>

<ul>
<li>GIFアニメを見られるサイトはたくさんあるけど、GIFアニメを作るところからやりたかったとの事</li>
<li>一番使って欲しいユーザー向けの機能の取捨選択がWebサービスの強みに繋がるようだ</li>
</ul>


<h3>togetter / @yositosi さん</h3>

<ul>
<li>もともとはイベントのレポートを用意するかわりにツイートをまとめられるようにしたのが発端だそうだ</li>
</ul>


<h3>クイズを支える技術 / @debility さん</h3>

<ul>
<li>スタッフ入りから30min or die</li>
<li>余興に使えるのは30min or die</li>
<li>手書き部分を署名の電子化に使えるんじゃないかとかいう話が出ている</li>
</ul>


<h2>雑感</h2>

<p>後半アルコールのせいかメモがまとめきれてない感じになってて薄くなってますが（笑）</p>

<p>とにかく小さくてもとりあえず作って始めてしまうのが大事なんだなという感じ。</p>

<p>ネタもロクに思いつかないのになにか作りたい気分になってくる発表でした。</p>
]]></content>
<id>tag:nira.poi.jp,2014-08-29:blog:entry-2014-08-28-02.html</id>
<published>2014-08-29T42:42:21+0900</published>
<updated>2014-08-29T00:42:21+09:00</updated>
</entry>
<entry>
<title type="text">長いことさぼってました</title>
<link href="http://nira.poi.jp/blog/entry/2014-08-28-01.html" />
<author>
<name>Kenichi Kobayashi</name>
</author>
<content><![CDATA[<h1>長いことさぼってました</h1>

<p>そろそろYAPC::Asia 2014開催ということで思い出してみたら9ヶ月弱くらいほったらかしだったようで。</p>

<p>今回は1日ごとにblog書いていきたいなぁと。</p>
]]></content>
<id>tag:nira.poi.jp,2014-08-28:blog:entry-2014-08-28-01.html</id>
<published>2014-08-28T19:19:06+0900</published>
<updated>2014-08-28T16:19:06+09:00</updated>
</entry>
<entry>
<title type="text">NudgePadで遊んでみた -1-</title>
<link href="http://nira.poi.jp/blog/entry/2013-12-04-01.html" />
<author>
<name>Kenichi Kobayashi</name>
</author>
<content><![CDATA[<h1>NudgePadで遊んでみた -1-</h1>

<p>JavaScriptをブラウザ上で試すサイト、ってのはよくある(最近お気に入りの<a href="http://plnkr.co/">Plunker</a>もそのひとつ)んですが、<a href="http://nudgepad.com/">NudgePad</a>というnode.jsのWebサーバをブラウザ上で試せるサイトがある、ということで、面白そうだったので遊んでみました。</p>

<ul>
<li><a href="http://www.moongift.jp/2013/11/nudgepad-%E8%A9%A6%E3%81%9D%E3%81%86%EF%BC%81web%E3%83%99%E3%83%BC%E3%82%B9%E3%81%AEide%E5%AE%9F%E8%A1%8C%E7%92%B0%E5%A2%83/">NudgePad - 試そう!WebベースのIDE&amp;実行環境</a></li>
</ul>


<h2>サインアップ</h2>

<p><a href="http://nudgepad.com/">http://nudgepad.com/</a> にアクセスすると、 <a href="http://landing.nudgepad.com/">http://landing.nudgepad.com/</a> にリダイレクトされてサインアップ画面になります。</p>

<p>プロジェクトURLは、重複するものがなければ再確認なしで作成されるので、Start Project ボタンを押すときは用心したほうが良さそうです。</p>

<h2>とりあえずセキュリティ対策</h2>

<p>プロジェクトが無事作成されるとファイル一覧画面になります。</p>

<p>この時点で用意されているのは index.html と nudgepad/ ディレクトリですが、ここにあるファイル<strong>すべてが</strong>プロジェクトURLから公開されている状態です。</p>

<p>nudgepad/ ディレクトリにはログインに必要な情報も入っているので、ファイル名さえわかっていれば<strong>丸見え</strong>になります。</p>

<p>とりあえず用心のため、 nアイコン → Labs → Private でプライベートファイルの設定をしてしまいます。(なんでこんな重要な機能が Labs なのかは謎)</p>

<p>テキストエリアに <code>/nudgepad/</code> を入力して Save して、 Restart でサーバを再起動すると、とりあえずnudgepadディレクトリ以下はログインしているユーザー以外にはみえなくなって一安心です。</p>

<h2>まずサーバ側を試してみる</h2>

<p>nアイコン → Server でサーバ側のログとシステム情報が確認できます。ここにコンソールもあって、直接コマンドを実行することもできます。</p>

<p>ここで Menu → Edit App.js すると、以下の内容の app.js というファイルがWebサーバのひな形として作られます。</p>

<pre><code>module.exports = function (app) {
  app.get('/hello', function (req, res, next) {
    res.send('Hello world')
  })
}
</code></pre>

<p>Restart でサーバを再起動すると、 app.js が起動時に読み込まれます。</p>

<p>ひな形には /hello へのリクエストに文字列を返す処理が入っているので、試しに http://プロジェクトURL/hello にアクセスすると、 app.jsに書いてある処理の通りに “Hello world” が表示されるはずです。</p>

<p>ちなみに、フレームワークは<a href="http://expressjs.com/">express</a>の3.1.1が使われているようです。</p>

<p>あと、 app.js はさすがに特別扱いされているようで、 http://プロジェクトURL/app.js にアクセスしても、 "app.js is private" と表示されるだけで中身は見えませんでした。</p>

<h2>GitHubとの連携</h2>

<p>nアイコン → Labs の一覧に Git とかあったので試してみました。</p>

<p>Commands メニューにgit関係のコマンドが用意されています。</p>

<p>まず、 Install で<code>git init</code>が(あとたぶん<code>git add .</code>も)実行されて、リポジトリが初期化されます。</p>

<p>実行結果にも書いてありますが、ユーザー名とメールアドレスを設定しろ、と言われるのですが、 Git 画面からは設定できないらしく、コンソールから</p>

<pre><code>git config --global user.email "you@example.com"
git config --global user.name "Your Name"
</code></pre>

<p>をそれぞれ実行することで設定する必要があります。</p>

<p>設定が終わったら Commit でコミットしておきます。</p>

<p>次にGitHubにリポジトリを用意して、 Create Deploy Key で SSH Key を作るんですが、ポップアップに小さく Key が表示されます。うっかり閉じてしまった場合は /nudgepad/deploy.key.pub に Key が格納されてます。</p>

<p>お察しの通り、 Private で隠しておかないと、Private Keyともども<strong>丸見え</strong>です。</p>

<p>GitHubのリポジトリの Deploy Key にこの Key を設定すれば、NudgePadからGitHubにアクセスできるようになります。Connect to GitHub でGitHubへの接続テストができますが、 ~/.ssh にディレクトリがないとエラーになるので、コンソールから</p>

<pre><code>mkdir ~/.ssh
chmod 700 ~/.ssh
</code></pre>

<p>で用意するのが吉です。</p>

<p>あとは、 Add Origin でGitHubのリポジトリURL(SSHのほう)を設定して Push to Origin すれば、GitHubのリポジトリにファイルが格納されます。</p>

<p>さっき書いたとおり、コンソールから普通にgitコマンド使えるので、いざとなればいつもどおりの運用もできるかと。</p>

<h2>ログイン機構</h2>

<p>ここまできてもまだ「ログイン」らしい作業をなにもしてないですが、ユーザー認証情報はCookieに入っているだけなので、ほっとくとログインできなくなってしまいます。</p>

<p>nアイコン → Team にユーザー認証まわりの設定がありますが、作りかけ感たっぷりなシロモノで、メニュー名が"undefined"になってたり、メニューの Login Link を選んでも肝心の部分が"undefined"になったダメっぽいURLが表示されるだけだったりします。</p>

<p>普通にプロジェクトを作ったままの場合、ユーザーのメールアドレスは owner@プロジェクト名.nudgepad.com になっています。チームメンバーなら後述するログイン画面でメールアドレスを入力すれば、メールでログイン用のURLが送られてきますが、このままでは当然メールが届きません。</p>

<p>というわけで、 Change Email で自分のメールアドレスを入力するのがここでの正解のようです。</p>

<p>で、 Logout を選んだり、Cookieが消えたりしてログインし直す時はどうするのか、というと、 http://プロジェクトURL/nudgepad にアクセスするとログイン画面が表示されるので、登録しておいたメールアドレス入力して Get Login Link をクリックすると、ログイン用のURLがメールで送られてきます。</p>

<p>お察しの通り、ログイン機構はとても簡易なもので、このURLがバレてしまうとログインできてしまうというレベルのものです。もともと本格的なものに使うサイトではありませんが要注意ポイントです。</p>

<h2>今日はここまで</h2>

<p>まだほんのさわりだけですが、NudgePadを使いはじめるにあたって必要そうなあたりをまとめてみました。</p>

<p>使ってくうえでいろいろ問題もあったりするんですが、個人的にはそれ込みで楽しめているので、しばらく付き合っていこうかと思っています。</p>
]]></content>
<id>tag:nira.poi.jp,2013-12-05:blog:entry-2013-12-04-01.html</id>
<published>2013-12-05T53:53:29+0900</published>
<updated>2013-12-05T00:53:29+09:00</updated>
</entry>
<entry>
<title type="text">続・FreeBSDのportsを一般ユーザー権限でインストールしてみるテスト</title>
<link href="http://nira.poi.jp/blog/entry/2013-10-20-02.html" />
<author>
<name>Kenichi Kobayashi</name>
</author>
<content><![CDATA[<h1>続・FreeBSDのportsを一般ユーザー権限でインストールしてみるテスト</h1>

<p>とりあえずblog更新して、ああそういえばgitも入ってないんだよな欲しいよな、と早速流用して<code>make</code>してみたところ、</p>

<pre><code>$ make
===&gt; Cannot create , check permissions
*** Error code 1
</code></pre>

<p>おいおい。という訳で再調査。</p>

<p><code>/usr/ports/Mk</code>をこのメッセージで検索したところ、portsのオプション設定のあたりがどうやら原因のようでした。</p>

<p><code>NO_PKG_REGISTER</code>を設定したので<code>/var/db/ports</code>はそのままで無視していたのですが、どうやらオプション設定するあたりで参照しているようなので、これをダミーで設定するようにしてみました。</p>

<pre><code>PORT_DBDIR=${HOME}/var/db/ports
</code></pre>

<p>これを<code>~/ports/ports/ports.userspace.mk</code>に追加することで無事makeが通るようになりました。</p>

<p>パーミッションでエラーで出てたくせに、ディレクトリが存在しなくても問題ないのは謎、というかそこまで追っかけてません。</p>

<p>次に<code>make install</code>すると<code>git_daemon</code>を<code>~/ports/etc/rc.d/</code>に置こうとして失敗するので、あらかじめ、</p>

<pre><code>$ mkdir -p ~/ports/etc/rc.d
</code></pre>

<p>でディレクトリを用意しておきます。(当然<code>git_daemon</code>は使いませんが)</p>

<p>これで無事にgitもインストールできました。</p>

<p>おそらくportsのシステムで参照しているディレクトリをひと通りチェックして対策していれば、こんなにすぐに引っかからなかったんでしょうけど、最低限必要なものが入ればいいだけなので今後も全チェックまではやらないかと。</p>
]]></content>
<id>tag:nira.poi.jp,2013-10-20:blog:entry-2013-10-20-02.html</id>
<published>2013-10-20T43:43:28+0900</published>
<updated>2013-10-20T02:43:28+09:00</updated>
</entry>
<entry>
<title type="text">FreeBSDのportsを一般ユーザー権限でインストールしてみるテスト</title>
<link href="http://nira.poi.jp/blog/entry/2013-10-20-01.html" />
<author>
<name>Kenichi Kobayashi</name>
</author>
<content><![CDATA[<h1>FreeBSDのportsを一般ユーザー権限でインストールしてみるテスト</h1>

<p><strong>※ この記事の作業だけでは動かないportsもあります。詳しくは次の記事を参照してください。</strong></p>

<p>(論理)今日は朝っぱらから<a href="http://www.yokohama-akarenga.jp/oktoberfest2013/">横浜にビールでも飲み</a>に行くか、と思ってたのに、なぜか昔使ってたFreeBSDな環境を気まぐれで再整備してました。</p>

<p>ただviが素のviだったで、とりあえずなんとかしたいなと思ったんだけど、自分の管理してるサーバじゃないのでユーザー権限だけでなんとかできる方法を探してみました。</p>

<ul>
<li><a href="http://quantum-public-diary.blogspot.jp/2012/12/portsfreebsd.html">quantum の記録: portsにあるものを一般ユーザとしてインストールする方法(FreeBSD)</a></li>
</ul>


<p>記事中ちょっと気になったのが、</p>

<blockquote><p>でもinstallは途中でsuをしようとして失敗するので、手で配置する。</p></blockquote>

<p>というところで、あのへんいろいろ細工できるようになってた気がしたので、<code>/usr/ports/Mk/bsd.port.mk</code>を読んでみたら、</p>

<pre><code># INSTALL_AS_USER
#                               - Define this to install as the current user, intended
#                                 for systems where you have no root access.
</code></pre>

<p>なんてのを発見。
あとはシステムのディレクトリ見に行きそうなあたりを回避する目的で<code>NO_PKG_REGISTER</code>とか<code>NO_MTREE</code>あたりを追加してみました。</p>

<p>最終的には以下のような感じ。基本的な流れは元サイトそのままです。</p>

<h3>1. インストール場所の用意、portsの知恵を借りる</h3>

<p>元サイトと配置が違うけど、この辺りはお好みでどうぞ。</p>

<p>vimだけじゃなくて他もインストールする可能性ある気がしたのでこんな感じに。</p>

<pre><code>$ mkdir ~/ports
$ mkdir ~/ports/ports
$ mkdir ~/ports/distfiles
$ cp -r /usr/ports/editors/vim ~/ports/ports/
</code></pre>

<h3>2. Makefileを編集する</h3>

<p>設定を上書きする部分は、あとで他のportsを入れるときにも使いまわせるように、別ファイルにして<code>.include</code>で読み込むようにしてみました。</p>

<pre><code>INSTALL_AS_USER=yes
NO_PKG_REGISTER=yes
NO_MTREE=yes
DISTDIR=${HOME}/ports/ports/distfiles
PREFIX=${HOME}/ports
WRKDIR=/tmp/work
TARGETDIR=${HOME}/ports
</code></pre>

<p>上記の内容で<code>~/ports/ports/ports.userspace.mk</code>というファイルを作成しておいて、<code>~/ports/ports/vim/Makefile</code>の先頭に、</p>

<pre><code>.include "../ports.userspace.mk"
</code></pre>

<p>を追加します。</p>

<h3>3. makeして、installする</h3>

<p>普通にインストールできるようになりました。</p>

<pre><code>$ cd ~/ports/ports/vim/
$ make
$ make install
</code></pre>

<h3>4. 補足</h3>

<p>とりあえずvimに関してはこれで特に問題なかったんですが、その他のportsがこれだけで十分かは不明なので、実際に自分の環境で試してみる場合にはご注意ください。</p>

<p>しかし、vim 7.3のパッチが556個(本家ftp.vim.orgに置いてあるファイルは1,314個)もあって、fetchしてくるときにftpサイトが音を上げてエラーをだしているという……fetchしているときにProtocol errorとか出てても気にしないでください。</p>

<p>これports側でhttpを優先にするかvim.org側である程度の数ごとにtarballにしたほうがいい気が……</p>
]]></content>
<id>tag:nira.poi.jp,2013-10-20:blog:entry-2013-10-20-01.html</id>
<published>2013-10-20T47:47:12+0900</published>
<updated>2013-10-20T02:43:28+09:00</updated>
</entry>
<entry>
<title type="text">YAPC::Asia Tokyo 2013に参加してきました</title>
<link href="http://nira.poi.jp/blog/entry/2013-09-22-03.html" />
<author>
<name>Kenichi Kobayashi</name>
</author>
<content><![CDATA[<h1>YAPC::Asia Tokyo 2013に参加してきました</h1>

<p>という訳で、<a href="http://yapcasia.org/2013/09/yapcasia-2013.html">「ブログを書くまでがYAPC」</a>だそうなので感想エントリを書いてみます。</p>

<h2>会場</h2>

<p>駅からも近くて、会場内の移動が基本フラットだったのが便利でした。</p>

<p>ただ、受付〜メインホール出入口はボトルネックになっていた感じ。
屋台村は通路に設置しないほうが、屋台がみたい人にとっても通路を通るだけの人にとっても良かった気はします。</p>

<p>提灯とか飾ってあってお祭りっぽい雰囲気はなかなか良かったので、次回もうちょっとスペースとってやってもいいかと。</p>

<h2>会場ネットワーク</h2>

<p>一部のアクセスポイントで、繋がっているようにみえてデータが流れない、という状況が発生することがありましたが、 それ以外は快適で非常に助かりました。</p>

<h2>ランチセッション</h2>

<p>お弁当美味しかったですｗ</p>

<h2>トーク</h2>

<p>自分の興味半分、仕事に使えそうなネタ半分で選んだ感じですが、裏で行けなかったトークにも面白そうなのが沢山あって、今回は特にぎりぎりまでどれにするか迷いました。</p>

<p>多目的教室を使う一部のトークが大入りになっていて、イベントホール使っていれば良かったんじゃないか、という気もしました。
このへんは飲食可なのがイベントホールのみ、という事情もあったのかもしれませんが。</p>

<p>あとはトークとトークの間に休憩時間がもう少し欲しかったですね。
わりとトイレもギリギリという感じだったので。</p>

<h2>懇親会</h2>

<p>今回は直後に大人の事情があって1時間弱だけ参加でしたが、食事も話も楽しめました。</p>

<h2>LT</h2>

<p>2日目のLTで時間切り詰めになっても、すごい勢いで発表している様は、まさにLightning。</p>

<h2>(個人的な)トラブル</h2>

<p>1日目いきなり寝坊＋東横線のトラブルでオープニングには間に合わなかったのが痛かった……</p>

<h2>次回以降の話</h2>

<p>今回で牧さんとくしいさんが引退ということで、次回以降どうなるのか予想つかない状態ですが、また1,000人以上集まるような大規模なイベントになることを期待したいです。</p>

<p>自分もLTソンあたり挑戦してみたいですね。</p>
]]></content>
<id>tag:nira.poi.jp,2013-09-22:blog:entry-2013-09-22-03.html</id>
<published>2013-09-22T56:56:07+0900</published>
<updated>2013-09-22T19:56:07+09:00</updated>
</entry>
<entry>
<title type="text">ぶろぐはじめました(n年ぶりm度目)</title>
<link href="http://nira.poi.jp/blog/entry/2013-09-22-01.html" />
<author>
<name>Kenichi Kobayashi</name>
</author>
<content><![CDATA[<h1>ぶろぐはじめました(n年ぶりm度目)</h1>

<p>とりあえずYAPC::Asia Tokyo 2013を終わらせるのにBlogつくってみました。</p>

<p>以前のYAPC::AsiaでBlog書いてないので終わってないんじゃないか、という件については気にしないでください。</p>

<p>Blogつくるにあたってのイロイロは以降のエントリで……</p>
]]></content>
<id>tag:nira.poi.jp,2013-09-22:blog:entry-2013-09-22-01.html</id>
<published>2013-09-22T51:51:17+0900</published>
<updated>2013-09-22T17:51:17+09:00</updated>
</entry>
<entry>
<title type="text">Riji入れてみた</title>
<link href="http://nira.poi.jp/blog/entry/2013-09-22-02.html" />
<author>
<name>Kenichi Kobayashi</name>
</author>
<content><![CDATA[<h1>Riji入れてみた</h1>

<p>ちょうど<a href="http://www.songmu.jp/riji/entry/2013-09-21-yapcasia2013-1.html">YAPC::Asia Tokyo 2013のLTでSongmuさんが紹介</a>していた<a href="https://github.com/Songmu/p5-Riji">Riji</a>を使ってみました。</p>

<p>以下メモと雑感。</p>

<ul>
<li>依存モジュールのインストールに時間かかるなーと思ったら、50個くらいモジュールが追加された。(plenvで入れた、ほぼすっぴん状態のPerlだったから、というのはあるかもしれない)</li>
<li>チュートリアルで言及されていて、TOML(<a href="https://github.com/mojombo/toml">https://github.com/mojombo/toml</a>)ってのがあるのを知った。ぱっと見はデータ構造つきで階層化できるiniファイルっぽい印象。</li>
<li>いままでwget入れてなかったのに気がついた。普段curl使ってて困ってなかったし。でもソースざっと眺めてみた感じだとwget使ってないような？</li>
<li>GitHub Pages+独自ドメインで使ってみた。<a href="http://songmu.github.io/p5-Riji/blog/entry/003_publish.html">チュートリアル003</a>と<a href="https://help.github.com/categories/20/articles">GitHub PagesのHelp</a>を参考に。

<ul>
<li>User Pagesの場合、gh-pagesブランチじゃなくてmasterブランチのファイルを参照するので、riji.ymlへの設定の追加とgh-pagesブランチへの切り替えは不要</li>
<li>User Pages用のリポジトリ名の規則は決まっている(username.github.ioというリポジトリを作る)</li>
<li>CNAMEというファイルをリポジトリのルートに置いて、使うドメイン名を書く</li>
<li>使うドメインをCNAME使ってusername.github.ioに向ける。CNAME使えない場合は指定のIPアドレスに。</li>
</ul>
</li>
<li><a href="http://songmu.github.io/p5-Riji/blog/entry/002_edit.html">チュートリアル002</a>のとおりにサンプル削除してそのままcommitしてしまうと、entryディレクトリが消えてしまうので、.gitignoreとか.gitkeepとか置いておくと吉かもしれない。あとriji new-entryはentryディレクトリ消えてるとエラーでコケる。</li>
<li>riji server -R articleでファイル更新に追従してくれる。(メモってなかったけど発表のデモでやってた気がする)</li>
<li>デフォルトのテンプレートで使ってるBootstrapは3.0.0-rc1だったけど、既に3.0.0出てたのでテンプレート修正時についでに変更。</li>
<li>とりあえずTwitterのWidgetくらいはくっつけてみた。</li>
<li>コメントはどうしよう？</li>
</ul>


<p>実際エントリ書きよりもテンプレート修正とGitHub Pages関係(User Pagesなのにgh-pages作ったりしてハマった)のほうに時間がかかった気がします。</p>

<p>せっかく作ったので、こまめに更新できたらなぁ、と。</p>
]]></content>
<id>tag:nira.poi.jp,2013-09-22:blog:entry-2013-09-22-02.html</id>
<published>2013-09-22T51:51:17+0900</published>
<updated>2013-09-22T17:51:17+09:00</updated>
</entry>
</feed>
